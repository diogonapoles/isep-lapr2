@startuml
autonumber
actor "Administrator" as ADM


participant ":RegisterEmployeeUI" as UI
participant ":RegisterEmployeeController" as CTRL
participant "Application" as APP
participant "app\n:Application" as App
participant "comp:Company" as COMP
participant "emps\n:EmployeeStore" as EMPS
participant "emp: Employee" as EMP
participant "auth\n:AuthFacade" as AF
participant ":UserRoleStore" as URS
participant ":UserRoleMapper" as URM
participant "lRoles\n List<UserRole>" as LR
participant "lRolesDTO\n: List<UserRoleDTO>" as lRDTO
participant "sRoles\n: Set<UserRole>" as SR



activate ADM

ADM -> UI : starts registering a new employee
activate UI

UI -> CTRL : lRolesDto = getRoles()
activate CTRL

CTRL -> APP : app = getInstance()
activate APP
deactivate APP

CTRL -> App: session = getCurrentSession()
activate App
deactivate App

CTRL -> App : comp = getCompany()
activate App
deactivate App

CTRL -> COMP: auth = getAuthFacade()
activate COMP


CTRL -> COMP: lRoles = getRoles()
deactivate COMP


CTRL -> AF : lRolesDTO = getUserRoles()
activate AF

AF -> URS : sRoles = getAll()
activate URS
deactivate URS

AF -> URM :  toDTO(sRoles)
activate URM

deactivate URM
deactivate AF
deactivate CTRL

UI --> ADM : ask to select the employee role
deactivate UI



ADM -> UI : selects the intended role
activate UI

UI --> ADM : request data (name, phoneNumber, address,\n emailAddress, citizenCardNumber)
deactivate UI




ADM -> UI : types requested data
activate UI

UI -> CTRL :createEmployee(name, phoneNumber, address,\n emailAddress, citizenCardNumber, role)
activate CTRL

CTRL -> COMP : emps = getEmployeeStore()
activate COMP
deactivate COMP

CTRL -> EMPS : emp = createEmployee(name, phoneNumber, address,\nemailAddress, citizenCardNumber, role)
activate EMPS

EMPS --> EMP** : create(name, phoneNumber, address, \nemailAddress, citizenCardNumber)

note over EMP : **emp** might be an instance of CenterCoordinator \nor Nurse or Receptionist. It depends of the type \nof Employee receiving this message


CTRL -> EMPS : validateEmployee(emp)

EMPS -> EMP : email = getEmailAddress()
activate EMP
deactivate EMP

EMPS -> AF : eu = existsUser(email)
activate AF
deactivate AF
deactivate CTRL
deactivate EMPS

UI --> ADM : shows the data and requests a confirmation
deactivate UI



ADM -> UI : confirms the data
activate UI

UI -> CTRL : registerEmployee()
activate CTRL

CTRL -> EMPS: registerEmployee(emp)
activate EMPS

EMPS -> EMP : email = getEmailAddress()
activate EMP

EMPS -> EMP : name = getName()

deactivate EMP

EMPS -> EMPS : pwd = passwordGenerator(name,email)
activate EMPS
deactivate EMPS

EMPS -> AF : addu = addUserWithRole(name, email, pwd, role)
activate AF
deactivate AF

EMPS -> EMPS : addEmployee(emp)
activate EMPS
deactivate EMPS
deactivate EMPS
deactivate CTRL

UI --> ADM : informs operation success
deactivate UI


deactivate ADM

@enduml